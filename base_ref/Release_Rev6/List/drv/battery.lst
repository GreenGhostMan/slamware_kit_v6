###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         28/Jul/2021  15:57:26
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\drv\battery.c
#    Command line                 =
#        -f
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\drv\battery.lst.rsp
#        (C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\drv\battery.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_HD -D USART_ENABLE_USART3 -D
#        CONFIG_BREAKOUT_REV=6 -D USE_FRONT_IR_SENSORS -D FEATURE_SET_V -lCN
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\drv
#        --diag_suppress Pa050 -o
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\drv
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\..\common\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\CoreSupport\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\32f10x\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\drv\battery.o.d
#    Locale                       =  C
#    List file                    =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\drv\battery.lst
#    Object file                  =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\drv\battery.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\drv\battery.c
      1          /*
      2           * SlamTec Base Ref Design
      3           * Copyright 2009 - 2017 RoboPeak
      4           * Copyright 2013 - 2017 Shanghai SlamTec Co., Ltd.
      5           * http://www.slamtec.com
      6           * All rights reserved.
      7           */
      8          /*
      9           * Redistribution and use in source and binary forms, with or without modification,
     10           * are permitted provided that the following conditions are met:
     11           *
     12           * 1. Redistributions of source code must retain the above copyright notice,
     13           *    this list of conditions and the following disclaimer.
     14           *
     15           * 2. Redistributions in binary form must reproduce the above copyright notice,
     16           *    this list of conditions and the following disclaimer in the documentation
     17           *    and/or other materials provided with the distribution.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
     20           * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     21           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
     22           * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     23           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
     24           * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     25           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
     26           * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     27           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     28           *
     29           */
     30          
     31          #include "common/common.h"
     32          #include "battery.h"
     33          #include "beep.h"
     34          #include "utils/filters.h"
     35          
     36          #define CONFIG_POWERSTATE_CHECK_DURATION       10       //单位：ms
     37          #define CONFIG_CHARGEBASE_REMOVAL_THRESHOLDTS  100      //单位：ms

   \                                 In section .data, align 4
     38          static _u32 batteryFrequency = 0;
     39          static _u32 batteryElectricityPercentage = 0;
     40          static _u8 chargeSound = 2;
   \                     chargeSound:
   \        0x0   0x02               DC8 2
   \        0x1   0x00               DC8 0
   \        0x2   0x00               DC8 0
   \        0x3   0x00               DC8 0
   \        0x4   0x00               DC8 0
   \        0x5                      DS8 1
   \        0x6   0x00               DC8 0
   \        0x7   0x00               DC8 0
   \        0x8   0x0000             DC16 0
   \        0xA   0x00 0x00          DC8 0, 0
   \        0xC   0x0000'0000        DC32 0
   \       0x10   0x0000'0000        DC32 0
   \       0x14                      DS8 20
     41          static _u8 isChargeInserted = 0;
     42          static _u8 chargeInsertedTs = 0;
     43          static _u8 isDcInserted = 0;
     44          static _u8 dcInsertedTs = 0;
     45          
     46          // avg filter queue for power supply sampling...
     47          #define PWR_FILTER_QUEUE_BIT    3
     48          #define PWR_FILTER_QUEUE_SIZE   (0x1<<PWR_FILTER_QUEUE_BIT)
     49          static _u16 _pwrCachedBattVoltADCVal = 0;
     50          static _u16 _pwrFilterBattVoltQueue[PWR_FILTER_QUEUE_SIZE+2];
     51          static _u8  _pwrFilterPos;
     52          enum {
     53              BATTERY_ADC_STATE_IDLE = 0,
     54              BATTERY_ADC_STATE_WAITING = 1,
     55          };
     56          static _u8  _pwrAdcSampleState = 0;
     57          static void _battery_sample_batteryvoltage();
     58          /*
     59           * 电池容量ADC检测初始化函数
     60           */
     61          static void init_electricity_detect(void)
     62          {
     63              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO|RCC_APB2Periph_ADC1, ENABLE);
     64              pinMode(BATT_VOLT_ADC_PORT, BATT_VOLT_ADC_PIN, GPIO_Mode_AIN, GPIO_Speed_10MHz);
     65          
     66              _pwrAdcSampleState = BATTERY_ADC_STATE_IDLE;
     67              _pwrFilterPos = 0;
     68              // preheat the adc avg-filter queue...
     69              do{
     70                    _battery_sample_batteryvoltage();
     71                } while (_pwrFilterPos!=0);
     72          }
     73          /*
     74           * 获取电池电压函数
     75           * 返回电压值，单位：mV
     76           */

   \                                 In section .text, align 2, keep-with-next
     77          _u32 get_electricity(void)
     78          {
     79              const _u32  ADC_LEVELS = (0x1<<ADC_RES_BIT); //4096
     80            //  ADC_REF = 2.495
     81            //  VBATT / BATTERY_VOLTAGE_SCALEFACTOR = adc_val * ADC_REF / 4096
     82            const float ADC_TO_BATT_VOLT_FACTOR = (ADC_REF_VOLT * 1000 * BATTERY_VOLTAGE_SCALEFACTOR) / ADC_LEVELS;
     83            const _u32  ADC_TO_BATT_VOLT_FACTOR_fixQ10 = (_u32)(ADC_TO_BATT_VOLT_FACTOR * 1024.0);
     84            return (_pwrCachedBattVoltADCVal * ADC_TO_BATT_VOLT_FACTOR_fixQ10)>>10;
   \                     get_electricity: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7
   \        0x2   0x8900             LDRH     R0,[R0, #+8]
   \        0x4   0xF641 0x513D      MOVW     R1,#+7485
   \        0x8   0x4348             MULS     R0,R1,R0
   \        0xA   0x0A80             LSRS     R0,R0,#+10
   \        0xC   0x4770             BX       LR
     85          }
     86          /*
     87           * 获取电池容量百分比函数
     88           * 返回百分比0-100%
     89           */

   \                                 In section .text, align 2, keep-with-next
     90          _u8 get_electricitypercentage(void)
     91          {
     92              return batteryElectricityPercentage;
   \                     get_electricitypercentage: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7
   \        0x2   0x6900             LDR      R0,[R0, #+16]
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x4770             BX       LR
     93          }
     94          /*
     95           * 电池充电电平检测初始化函数
     96           */
     97          static void init_charge_detect(void)
     98          {
     99              GPIO_InitTypeDef GPIO_InitStructure;
    100              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
    101              GPIO_InitStructure.GPIO_Pin = BATT_FAULT | BATT_CHRG | BATT_TOC | BATT_READY;
    102              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    103              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    104              GPIO_Init(GPIOE, &GPIO_InitStructure);
    105          
    106              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
    107              GPIO_InitStructure.GPIO_Pin = HOCHARGE_DETECT | DCCHARGE_DETECT;
    108              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    109              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    110              GPIO_Init(GPIOB, &GPIO_InitStructure);
    111          }
    112          /*
    113           * 电池充电状态检测函数
    114           * 返回正在充电或不在充电状态
    115           */

   \                                 In section .text, align 2, keep-with-next
    116          _u8 charge_detect_getstatus(void)
    117          {
   \                     charge_detect_getstatus: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    118              if ((isChargeInserted || isDcInserted) && (0 == GPIO_ReadInputDataBit(GPIOE, BATT_READY))) {
   \        0x2   0x....             LDR.N    R0,??DataTable7
   \        0x4   0x7841             LDRB     R1,[R0, #+1]
   \        0x6   0x78C0             LDRB     R0,[R0, #+3]
   \        0x8   0x4301             ORRS     R1,R0,R1
   \        0xA   0xD006             BEQ.N    ??charge_detect_getstatus_0
   \        0xC   0x2104             MOVS     R1,#+4
   \        0xE   0x....             LDR.N    R0,??DataTable7_1
   \       0x10   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \       0x14   0xB908             CBNZ.N   R0,??charge_detect_getstatus_0
    119                  return ISCHARGE_CHRG;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xBD02             POP      {R1,PC}
    120              } else {
    121                  return ISCHARGE_NOCHRG;
   \                     ??charge_detect_getstatus_0: (+1)
   \       0x1A   0x2002             MOVS     R0,#+2
   \       0x1C   0xBD02             POP      {R1,PC}
    122              }
    123          }
    124          /*
    125           * 获取电池DC电源插头充电状态函数
    126           */

   \                                 In section .text, align 2, keep-with-next
    127          _s8 get_dc_charge_status(void)
    128          {
    129              return isDcInserted;
   \                     get_dc_charge_status: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7
   \        0x2   0xF990 0x0003      LDRSB    R0,[R0, #+3]
   \        0x6   0x4770             BX       LR
    130          }
    131          /*
    132           * 获取电池充电桩充电状态函数
    133           */

   \                                 In section .text, align 2, keep-with-next
    134          _s8 get_home_charge_status(void)
    135          {
    136              return isChargeInserted;
   \                     get_home_charge_status: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7
   \        0x2   0xF990 0x0001      LDRSB    R0,[R0, #+1]
   \        0x6   0x4770             BX       LR
    137          }
    138          static void _on_battery_adc_data_ready(_u16 adcData)
    139          {
    140              _pwrCachedBattVoltADCVal = add_to_avg_filter_u16(adcData, _pwrFilterBattVoltQueue, _pwrFilterPos, PWR_FILTER_QUEUE_SIZE);
    141              if ( (++_pwrFilterPos) >= PWR_FILTER_QUEUE_SIZE) {
    142                  _pwrFilterPos = 0;
    143              }
    144          }
    145          

   \                                 In section .text, align 2, keep-with-next
    146          static void _battery_sample_batteryvoltage()
    147          {
   \                     _battery_sample_batteryvoltage: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    148              switch (_pwrAdcSampleState) {
   \        0x2   0x....             LDR.N    R4,??DataTable7
   \        0x4   0x....             LDR.N    R0,??DataTable7_2
   \        0x6   0x79A2             LDRB     R2,[R4, #+6]
   \        0x8   0xB112             CBZ.N    R2,??_battery_sample_batteryvoltage_0
   \        0xA   0x2A01             CMP      R2,#+1
   \        0xC   0xD006             BEQ.N    ??_battery_sample_batteryvoltage_1
   \        0xE   0xBD10             POP      {R4,PC}
    149              case BATTERY_ADC_STATE_IDLE:
    150                  adc_read_start(GET_ADC(BATT_VOLT_ADC), BATT_VOLT_ADC_CHANNEL);
   \                     ??_battery_sample_batteryvoltage_0: (+1)
   \       0x10   0x2106             MOVS     R1,#+6
   \       0x12   0x.... 0x....      BL       adc_read_start
    151                  _pwrAdcSampleState = BATTERY_ADC_STATE_WAITING;
   \       0x16   0x2201             MOVS     R2,#+1
   \       0x18   0x71A2             STRB     R2,[R4, #+6]
    152                  break;
   \       0x1A   0xBD10             POP      {R4,PC}
    153              case BATTERY_ADC_STATE_WAITING:
    154                  if (adc_read_is_ready(GET_ADC(BATT_VOLT_ADC))) {
   \                     ??_battery_sample_batteryvoltage_1: (+1)
   \       0x1C   0x6801             LDR      R1,[R0, #+0]
   \       0x1E   0x0789             LSLS     R1,R1,#+30
   \       0x20   0xD511             BPL.N    ??_battery_sample_batteryvoltage_2
    155                      _on_battery_adc_data_ready(adc_read_final(GET_ADC(BATT_VOLT_ADC)));
   \       0x22   0x.... 0x....      BL       adc_read_final
   \       0x26   0x7962             LDRB     R2,[R4, #+5]
   \       0x28   0x2308             MOVS     R3,#+8
   \       0x2A   0xF104 0x0114      ADD      R1,R4,#+20
   \       0x2E   0x.... 0x....      BL       add_to_avg_filter_u16
   \       0x32   0x8120             STRH     R0,[R4, #+8]
   \       0x34   0x7960             LDRB     R0,[R4, #+5]
   \       0x36   0x1C40             ADDS     R0,R0,#+1
   \       0x38   0xB2C1             UXTB     R1,R0
   \       0x3A   0x2908             CMP      R1,#+8
   \       0x3C   0xBFA8             IT       GE
   \       0x3E   0x2000             MOVGE    R0,#+0
   \       0x40   0x7160             STRB     R0,[R4, #+5]
    156                      _pwrAdcSampleState = BATTERY_ADC_STATE_IDLE;
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0x71A0             STRB     R0,[R4, #+6]
    157                  }
    158                  break;
    159              }
    160          }
   \                     ??_battery_sample_batteryvoltage_2: (+1)
   \       0x46   0xBD10             POP      {R4,PC}
    161          /*
    162           * 电池相关初始化函数
    163           * 初始化电池容量检测
    164           * 初始化电池充电检测
    165           */

   \                                 In section .text, align 2, keep-with-next
    166          void init_battery(void)
    167          {
   \                     init_battery: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    168              init_electricity_detect();
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0xF240 0x2001      MOVW     R0,#+513
   \        0x8   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
   \        0xC   0x2140             MOVS     R1,#+64
   \        0xE   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \       0x12   0x2201             MOVS     R2,#+1
   \       0x14   0x2100             MOVS     R1,#+0
   \       0x16   0xF88D 0x1003      STRB     R1,[SP, #+3]
   \       0x1A   0xF88D 0x2002      STRB     R2,[SP, #+2]
   \       0x1E   0x4669             MOV      R1,SP
   \       0x20   0x....             LDR.N    R0,??DataTable7_3
   \       0x22   0x....             LDR.N    R4,??DataTable7
   \       0x24   0x.... 0x....      BL       GPIO_Init
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x71A0             STRB     R0,[R4, #+6]
   \       0x2C   0x7160             STRB     R0,[R4, #+5]
   \                     ??init_battery_0: (+1)
   \       0x2E   0x.... 0x....      BL       _battery_sample_batteryvoltage
   \       0x32   0x7960             LDRB     R0,[R4, #+5]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD1FA             BNE.N    ??init_battery_0
    169              init_charge_detect();
   \       0x38   0x2101             MOVS     R1,#+1
   \       0x3A   0x2040             MOVS     R0,#+64
   \       0x3C   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
   \       0x40   0x205C             MOVS     R0,#+92
   \       0x42   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x46   0x2248             MOVS     R2,#+72
   \       0x48   0xF88D 0x2003      STRB     R2,[SP, #+3]
   \       0x4C   0x4669             MOV      R1,SP
   \       0x4E   0x....             LDR.N    R0,??DataTable7_1
   \       0x50   0x.... 0x....      BL       GPIO_Init
   \       0x54   0x2101             MOVS     R1,#+1
   \       0x56   0x2008             MOVS     R0,#+8
   \       0x58   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
   \       0x5C   0xF44F 0x7040      MOV      R0,#+768
   \       0x60   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x64   0x2228             MOVS     R2,#+40
   \       0x66   0xF88D 0x2003      STRB     R2,[SP, #+3]
   \       0x6A   0x4669             MOV      R1,SP
   \       0x6C   0x....             LDR.N    R0,??DataTable7_4
   \       0x6E   0x.... 0x....      BL       GPIO_Init
    170          }
   \       0x72   0xBD13             POP      {R0,R1,R4,PC}
    171          /*
    172           * 电池相关模块函数
    173           * 充电状态的判定等
    174           */

   \                                 In section .text, align 2, keep-with-next
    175          void heartbeat_battery(void)
    176          {
   \                     heartbeat_battery: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    177              _battery_sample_batteryvoltage();
   \        0x2   0x.... 0x....      BL       _battery_sample_batteryvoltage
    178              if ((getms() - batteryFrequency) >= 3000) {
   \        0x6   0x....             LDR.N    R4,??DataTable7
   \        0x8   0x.... 0x....      BL       getms
   \        0xC   0x68E1             LDR      R1,[R4, #+12]
   \        0xE   0x1A40             SUBS     R0,R0,R1
   \       0x10   0xF640 0x32B8      MOVW     R2,#+3000
   \       0x14   0x4290             CMP      R0,R2
   \       0x16   0xD329             BCC.N    ??heartbeat_battery_0
    179                  //3秒检测一次电池容量及计算百分比
    180                  batteryFrequency = getms();
   \       0x18   0x.... 0x....      BL       getms
   \       0x1C   0x60E0             STR      R0,[R4, #+12]
    181          
    182                  _u32 currentVolt = get_electricity();
   \       0x1E   0xF641 0x503D      MOVW     R0,#+7485
   \       0x22   0x8922             LDRH     R2,[R4, #+8]
   \       0x24   0x4342             MULS     R2,R0,R2
   \       0x26   0x0A92             LSRS     R2,R2,#+10
    183                  if (currentVolt < BATTERY_VOLTAGE_EMPTY) {
   \       0x28   0xF642 0x61E0      MOVW     R1,#+12000
   \       0x2C   0x428A             CMP      R2,R1
   \       0x2E   0xBF38             IT       CC
   \       0x30   0x2000             MOVCC    R0,#+0
    184                      batteryElectricityPercentage = 0;
   \       0x32   0xD30D             BCC.N    ??heartbeat_battery_1
    185                  } else if (currentVolt > BATTERY_VOLTAGE_FULL) {
   \       0x34   0xF244 0x10A1      MOVW     R0,#+16801
   \       0x38   0x4282             CMP      R2,R0
   \       0x3A   0xBF28             IT       CS
   \       0x3C   0x2064             MOVCS    R0,#+100
    186                      batteryElectricityPercentage = 100;
   \       0x3E   0xD207             BCS.N    ??heartbeat_battery_1
    187                  } else {
    188                      batteryElectricityPercentage = (currentVolt - BATTERY_VOLTAGE_EMPTY)*100 / (BATTERY_VOLTAGE_FULL - BATTERY_VOLTAGE_EMPTY);
   \       0x40   0x....             LDR.N    R1,??DataTable7_5
   \       0x42   0x188A             ADDS     R2,R1,R2
   \       0x44   0x2064             MOVS     R0,#+100
   \       0x46   0x4342             MULS     R2,R0,R2
   \       0x48   0xF44F 0x5396      MOV      R3,#+4800
   \       0x4C   0xFBB2 0xF0F3      UDIV     R0,R2,R3
    189                  }
    190          
    191                  DBG_OUT("Battery voltage %d%%, %dmv\r\n", batteryElectricityPercentage, currentVolt);
    192          
    193                  if (batteryElectricityPercentage < 15 && ISCHARGE_CHRG != charge_detect_getstatus()) {
   \                     ??heartbeat_battery_1: (+1)
   \       0x50   0x280F             CMP      R0,#+15
   \       0x52   0x6120             STR      R0,[R4, #+16]
   \       0x54   0xD21A             BCS.N    ??heartbeat_battery_2
   \       0x56   0x.... 0x....      BL       charge_detect_getstatus
   \       0x5A   0x2801             CMP      R0,#+1
   \       0x5C   0xD016             BEQ.N    ??heartbeat_battery_2
    194                      {
    195          
    196          //                beep_beeper(3000, 400, chargeSound);
    197                          if ((chargeSound += 1) >= 250) {
   \       0x5E   0x7820             LDRB     R0,[R4, #+0]
   \       0x60   0x1C40             ADDS     R0,R0,#+1
   \       0x62   0xB2C1             UXTB     R1,R0
   \       0x64   0x29FA             CMP      R1,#+250
   \       0x66   0xBFA8             IT       GE
   \       0x68   0x20FA             MOVGE    R0,#+250
    198                              chargeSound = 250;
   \       0x6A   0x7020             STRB     R0,[R4, #+0]
   \                     ??heartbeat_battery_0: (+1)
   \       0x6C   0x78A5             LDRB     R5,[R4, #+2]
   \       0x6E   0x7926             LDRB     R6,[R4, #+4]
    199                          }
    200                      }
    201                  } else {
    202                      chargeSound = 2;
    203                  }
    204              }
    205              if (isChargeInserted) {
   \       0x70   0x7860             LDRB     R0,[R4, #+1]
   \       0x72   0x....             LDR.N    R7,??DataTable7_6
   \       0x74   0xB168             CBZ.N    R0,??heartbeat_battery_3
    206                  //是否处在充电桩充电状态
    207                  if (!PIN_READ(GPIOB, HOCHARGE_DETECT)) {
   \       0x76   0x6839             LDR      R1,[R7, #+0]
   \       0x78   0x05C8             LSLS     R0,R1,#+23
   \       0x7A   0xD40F             BMI.N    ??heartbeat_battery_4
    208                      //在充电桩充电下：检测是否脱离充电桩，拔出则更改充电桩充电状态
    209                      if (getms() - chargeInsertedTs >= CONFIG_CHARGEBASE_REMOVAL_THRESHOLDTS) {
   \       0x7C   0x.... 0x....      BL       getms
   \       0x80   0x1B40             SUBS     R0,R0,R5
   \       0x82   0x2864             CMP      R0,#+100
   \       0x84   0xD30D             BCC.N    ??heartbeat_battery_5
    210          //                beep_beeper(5000, 80, 2);
    211                          isChargeInserted = 0;
   \       0x86   0x2000             MOVS     R0,#+0
   \       0x88   0x7060             STRB     R0,[R4, #+1]
   \       0x8A   0xE00A             B.N      ??heartbeat_battery_5
    212                      }
    213                  } else {
    214                      chargeInsertedTs = getms();
    215                  }
    216          
    217              } else {
   \                     ??heartbeat_battery_2: (+1)
   \       0x8C   0x2102             MOVS     R1,#+2
   \       0x8E   0x7021             STRB     R1,[R4, #+0]
   \       0x90   0xE7EC             B.N      ??heartbeat_battery_0
    218                  //不在充电桩充电下：检测是否脱离充电桩，插入则更改充电桩充电状态
    219                  if (PIN_READ(GPIOB, HOCHARGE_DETECT)) {
   \                     ??heartbeat_battery_3: (+1)
   \       0x92   0x6838             LDR      R0,[R7, #+0]
   \       0x94   0x05C1             LSLS     R1,R0,#+23
   \       0x96   0xD504             BPL.N    ??heartbeat_battery_5
    220                      isChargeInserted = 1;
   \       0x98   0x2001             MOVS     R0,#+1
   \       0x9A   0x7060             STRB     R0,[R4, #+1]
    221          //            beep_beeper(5000, 80, 2);
    222                      chargeInsertedTs = getms();
   \                     ??heartbeat_battery_4: (+1)
   \       0x9C   0x.... 0x....      BL       getms
   \       0xA0   0x4605             MOV      R5,R0
    223                  }
    224          
    225              }
    226              if (isDcInserted) {
   \                     ??heartbeat_battery_5: (+1)
   \       0xA2   0x78E0             LDRB     R0,[R4, #+3]
   \       0xA4   0xB150             CBZ.N    R0,??heartbeat_battery_6
    227                  //是否处在DC电源充电状态
    228                  if (!PIN_READ(GPIOB, DCCHARGE_DETECT)) {
   \       0xA6   0x6839             LDR      R1,[R7, #+0]
   \       0xA8   0x0588             LSLS     R0,R1,#+22
   \       0xAA   0xD40C             BMI.N    ??heartbeat_battery_7
    229                      //在DC电源充电下：检测是否拔出DC电源，拔出则更改DC电源充电状态
    230                      if (getms() - dcInsertedTs >= CONFIG_CHARGEBASE_REMOVAL_THRESHOLDTS * 2) {
   \       0xAC   0x.... 0x....      BL       getms
   \       0xB0   0x1B80             SUBS     R0,R0,R6
   \       0xB2   0x28C8             CMP      R0,#+200
   \       0xB4   0xD30A             BCC.N    ??heartbeat_battery_8
    231                          //防抖动
    232                          isDcInserted = 0;
   \       0xB6   0x2000             MOVS     R0,#+0
   \       0xB8   0x70E0             STRB     R0,[R4, #+3]
   \       0xBA   0xE007             B.N      ??heartbeat_battery_8
    233                      }
    234                  } else {
    235                      dcInsertedTs = getms();
    236                  }
    237          
    238              } else {
    239                  //不在DC电源充电下：检测DC电源是否插入，插入则更改DC电源充电状态
    240                  if (PIN_READ(GPIOB, DCCHARGE_DETECT)) {
   \                     ??heartbeat_battery_6: (+1)
   \       0xBC   0x6838             LDR      R0,[R7, #+0]
   \       0xBE   0x0581             LSLS     R1,R0,#+22
   \       0xC0   0xD504             BPL.N    ??heartbeat_battery_8
    241                      isDcInserted = 1;
   \       0xC2   0x2001             MOVS     R0,#+1
   \       0xC4   0x70E0             STRB     R0,[R4, #+3]
    242                      dcInsertedTs = getms();
   \                     ??heartbeat_battery_7: (+1)
   \       0xC6   0x.... 0x....      BL       getms
   \       0xCA   0x4606             MOV      R6,R0
    243                  }
    244              }
    245          }
   \                     ??heartbeat_battery_8: (+1)
   \       0xCC   0x7126             STRB     R6,[R4, #+4]
   \       0xCE   0x70A5             STRB     R5,[R4, #+2]
   \       0xD0   0xBDF1             POP      {R0,R4-R7,PC}

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2101             MOVS     R1,#+1
   \        0x2   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \        0x6   0xF88D 0x1002      STRB     R1,[SP, #+2]
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x....'....        DC32     chargeSound

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x4001'1800        DC32     0x40011800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x4001'2400        DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0xFFFF'D120        DC32     0xffffd120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x4001'0C08        DC32     0x40010c08

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _battery_sample_batteryvoltage
         8   -> adc_read_final
         8   -> adc_read_start
         8   -> add_to_avg_filter_u16
       8   charge_detect_getstatus
         8   -> GPIO_ReadInputDataBit
       0   get_dc_charge_status
       0   get_electricity
       0   get_electricitypercentage
       0   get_home_charge_status
      24   heartbeat_battery
        24   -> _battery_sample_batteryvoltage
        24   -> charge_detect_getstatus
        24   -> getms
      16   init_battery
        16   -> GPIO_Init
        16   -> RCC_APB2PeriphClockCmd
        16   -> _battery_sample_batteryvoltage


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
      12  ?Subroutine0
      72  _battery_sample_batteryvoltage
      40  chargeSound
          isChargeInserted
          chargeInsertedTs
          isDcInserted
          dcInsertedTs
          _pwrFilterPos
          _pwrAdcSampleState
          _pwrCachedBattVoltADCVal
          batteryFrequency
          batteryElectricityPercentage
          _pwrFilterBattVoltQueue
      30  charge_detect_getstatus
       8  get_dc_charge_status
      14  get_electricity
       8  get_electricitypercentage
       8  get_home_charge_status
     210  heartbeat_battery
     116  init_battery

 
  40 bytes in section .data
 506 bytes in section .text
 
 506 bytes of CODE memory
  40 bytes of DATA memory

Errors: none
Warnings: none
