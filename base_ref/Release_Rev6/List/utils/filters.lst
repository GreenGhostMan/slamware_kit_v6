###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         28/Jul/2021  15:57:39
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\utils\filters.c
#    Command line                 =
#        -f
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\utils\filters.lst.rsp
#        (C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\utils\filters.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_HD -D USART_ENABLE_USART3 -D
#        CONFIG_BREAKOUT_REV=6 -D USE_FRONT_IR_SENSORS -D FEATURE_SET_V -lCN
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\utils
#        --diag_suppress Pa050 -o
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\utils
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\..\common\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\CoreSupport\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\32f10x\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\utils\filters.o.d
#    Locale                       =  C
#    List file                    =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\utils\filters.lst
#    Object file                  =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\utils\filters.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\utils\filters.c
      1          /*
      2           * SlamTec Base Ref Design
      3           * Copyright 2009 - 2017 RoboPeak
      4           * Copyright 2013 - 2017 Shanghai SlamTec Co., Ltd.
      5           * http://www.slamtec.com
      6           * All rights reserved.
      7           */
      8          /*
      9           * Redistribution and use in source and binary forms, with or without modification,
     10           * are permitted provided that the following conditions are met:
     11           *
     12           * 1. Redistributions of source code must retain the above copyright notice,
     13           *    this list of conditions and the following disclaimer.
     14           *
     15           * 2. Redistributions in binary form must reproduce the above copyright notice,
     16           *    this list of conditions and the following disclaimer in the documentation
     17           *    and/or other materials provided with the distribution.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
     20           * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     21           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
     22           * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     23           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
     24           * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     25           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
     26           * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     27           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     28           *
     29           */
     30          
     31          #include "common/common.h"
     32          #include "utils/filters.h"
     33          
     34          /*
     35           * 平均滤波函数
     36           * 将新数据放入滤波器再求平均
     37           * 数据类型：unsigned short
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          _u16 add_to_avg_filter_u16(_u16 new_data, _u16 * filter, size_t pos, size_t size)
     40          {
   \                     add_to_avg_filter_u16: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
     41              _s32 * sum = (_s32 *)(filter + size);
     42          
     43              *sum  -= (_s32)filter[pos];
     44              *sum  += (_s32)new_data;
   \        0x2   0xF851 0x5013      LDR      R5,[R1, R3, LSL #+1]
   \        0x6   0xF831 0x4012      LDRH     R4,[R1, R2, LSL #+1]
   \        0xA   0x.... 0x....      BL       ?Subroutine0
     45              filter[pos] = new_data;
     46          
     47              return (_u16)((*sum)/size);
   \                     ??CrossCallReturnLabel_0: (+1)
   \        0xE   0xFBB0 0xF0F3      UDIV     R0,R0,R3
   \       0x12   0xB280             UXTH     R0,R0
   \       0x14   0xBD30             POP      {R4,R5,PC}
     48          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x1B2D             SUBS     R5,R5,R4
   \        0x2   0x1945             ADDS     R5,R0,R5
   \        0x4   0xF841 0x5013      STR      R5,[R1, R3, LSL #+1]
   \        0x8   0xF821 0x0012      STRH     R0,[R1, R2, LSL #+1]
   \        0xC   0xF851 0x0013      LDR      R0,[R1, R3, LSL #+1]
   \       0x10   0x4770             BX       LR
     49          
     50          /*
     51           * 平均滤波函数
     52           * 将新数据放入滤波器再求平均
     53           * 数据类型：short
     54           */

   \                                 In section .text, align 2, keep-with-next
     55          _s16 add_to_avg_filter_s16(_s16 new_data, _s16 * filter, size_t pos, size_t size)
     56          {
   \                     add_to_avg_filter_s16: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
     57              _s32 * sum = (_s32 *)(filter + size);
     58          
     59              *sum  -= (_s32)filter[pos];
     60              *sum  += (_s32)new_data;
   \        0x2   0xF851 0x5013      LDR      R5,[R1, R3, LSL #+1]
   \        0x6   0xF931 0x4012      LDRSH    R4,[R1, R2, LSL #+1]
   \        0xA   0x.... 0x....      BL       ?Subroutine0
     61              filter[pos] = new_data;
     62          
     63              return (_s16)((*sum)/((_s32)size));
   \                     ??CrossCallReturnLabel_1: (+1)
   \        0xE   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0xBD30             POP      {R4,R5,PC}
     64          }
     65          
     66          /*
     67           * 平均滤波函数
     68           * 将新数据放入滤波器再求平均
     69           * 数据类型：unsigned int
     70           */

   \                                 In section .text, align 2, keep-with-next
     71          _u32 add_to_avg_filter_u32(_u32 new_data, _u32 * filter, size_t pos, size_t size)
     72          {
   \                     add_to_avg_filter_u32: (+1)
   \        0x0   0xE92D 0x49F0      PUSH     {R4-R8,R11,LR}
   \        0x4   0x4690             MOV      R8,R2
   \        0x6   0x461A             MOV      R2,R3
     73              _s64 * sum = (_s64 *)(filter + size);
     74          
     75              *sum  -= (_s64)filter[pos];
     76              *sum  += (_s64)new_data;
   \        0x8   0xEB01 0x0382      ADD      R3,R1,R2, LSL #+2
   \        0xC   0xE9D3 0x4300      LDRD     R4,R3,[R3, #+0]
   \       0x10   0xF851 0x6028      LDR      R6,[R1, R8, LSL #+2]
   \       0x14   0x2700             MOVS     R7,#+0
   \       0x16   0x1BA5             SUBS     R5,R4,R6
   \       0x18   0xEB63 0x0B07      SBC      R11,R3,R7
   \       0x1C   0x182E             ADDS     R6,R5,R0
   \       0x1E   0xEB01 0x0382      ADD      R3,R1,R2, LSL #+2
   \       0x22   0xEB4B 0x0707      ADC      R7,R11,R7
   \       0x26   0xE9C3 0x6700      STRD     R6,R7,[R3, #+0]
     77              filter[pos] = new_data;
   \       0x2A   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
     78          
     79              return (_u32)((*sum)/size);
   \       0x2E   0xEB01 0x0882      ADD      R8,R1,R2, LSL #+2
   \       0x32   0x2300             MOVS     R3,#+0
   \       0x34   0xE9D8 0x0100      LDRD     R0,R1,[R8, #+0]
   \       0x38   0xE8BD 0x49F0      POP      {R4-R8,R11,LR}
   \       0x3C   0x.... 0x....      B.W      __aeabi_ldivmod
     80          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   add_to_avg_filter_s16
      12   add_to_avg_filter_u16
      28   add_to_avg_filter_u32
         0 __aeabi_ldivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?Subroutine0
      22  add_to_avg_filter_s16
      22  add_to_avg_filter_u16
      64  add_to_avg_filter_u32

 
 126 bytes in section .text
 
 126 bytes of CODE memory

Errors: none
Warnings: none
