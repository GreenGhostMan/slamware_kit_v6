###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         28/Jul/2021  15:57:37
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\src\stm32f10x_wwdg.c
#    Command line      =
#        -f
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\FWLib\src\stm32f10x_wwdg.lst.rsp
#        (C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\src\stm32f10x_wwdg.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_HD -D USART_ENABLE_USART3 -D
#        CONFIG_BREAKOUT_REV=6 -D USE_FRONT_IR_SENSORS -D FEATURE_SET_V -lCN
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\FWLib\src
#        --diag_suppress Pa050 -o
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\FWLib\src
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\..\common\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\CoreSupport\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\32f10x\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\FWLib\src\stm32f10x_wwdg.o.d
#    Locale            =  C
#    List file         =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\FWLib\src\stm32f10x_wwdg.lst
#    Object file       =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\FWLib\src\stm32f10x_wwdg.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\src\stm32f10x_wwdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_wwdg.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the WWDG firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_wwdg.h"
     24          #include "stm32f10x_rcc.h"
     25          
     26          /** @addtogroup STM32F10x_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup WWDG 
     31            * @brief WWDG driver modules
     32            * @{
     33            */
     34          
     35          /** @defgroup WWDG_Private_TypesDefinitions
     36            * @{
     37            */
     38          
     39          /**
     40            * @}
     41            */
     42          
     43          /** @defgroup WWDG_Private_Defines
     44            * @{
     45            */
     46          
     47          /* ----------- WWDG registers bit address in the alias region ----------- */
     48          #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
     49          
     50          /* Alias word address of EWI bit */
     51          #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
     52          #define EWI_BitNumber     0x09
     53          #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
     54          
     55          /* --------------------- WWDG registers bit mask ------------------------ */
     56          
     57          /* CR register bit mask */
     58          #define CR_WDGA_Set       ((uint32_t)0x00000080)
     59          
     60          /* CFR register bit mask */
     61          #define CFR_WDGTB_Mask    ((uint32_t)0xFFFFFE7F)
     62          #define CFR_W_Mask        ((uint32_t)0xFFFFFF80)
     63          #define BIT_Mask          ((uint8_t)0x7F)
     64          
     65          /**
     66            * @}
     67            */
     68          
     69          /** @defgroup WWDG_Private_Macros
     70            * @{
     71            */
     72          
     73          /**
     74            * @}
     75            */
     76          
     77          /** @defgroup WWDG_Private_Variables
     78            * @{
     79            */
     80          
     81          /**
     82            * @}
     83            */
     84          
     85          /** @defgroup WWDG_Private_FunctionPrototypes
     86            * @{
     87            */
     88          
     89          /**
     90            * @}
     91            */
     92          
     93          /** @defgroup WWDG_Private_Functions
     94            * @{
     95            */
     96          
     97          /**
     98            * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
     99            * @param  None
    100            * @retval None
    101            */

   \                                 In section .text, align 2, keep-with-next
    102          void WWDG_DeInit(void)
    103          {
   \                     WWDG_DeInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    104            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0xF44F 0x6000      MOV      R0,#+2048
   \        0x8   0x.... 0x....      BL       RCC_APB1PeriphResetCmd
    105            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
   \        0xC   0xE8BD 0x4004      POP      {R2,LR}
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0xF44F 0x6000      MOV      R0,#+2048
   \       0x16   0x.... 0x....      B.W      RCC_APB1PeriphResetCmd
    106          }
    107          
    108          /**
    109            * @brief  Sets the WWDG Prescaler.
    110            * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
    111            *   This parameter can be one of the following values:
    112            *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
    113            *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
    114            *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
    115            *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
    116            * @retval None
    117            */

   \                                 In section .text, align 2, keep-with-next
    118          void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
    119          {
    120            uint32_t tmpreg = 0;
    121            /* Check the parameters */
    122            assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
    123            /* Clear WDGTB[1:0] bits */
    124            tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
   \                     WWDG_SetPrescaler: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable7
   \        0x2   0x680A             LDR      R2,[R1, #+0]
    125            /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
    126            tmpreg |= WWDG_Prescaler;
    127            /* Store the new value */
    128            WWDG->CFR = tmpreg;
   \        0x4   0xF422 0x72C0      BIC      R2,R2,#0x180
   \        0x8   0x4310             ORRS     R0,R0,R2
   \        0xA   0x6008             STR      R0,[R1, #+0]
    129          }
   \        0xC   0x4770             BX       LR
    130          
    131          /**
    132            * @brief  Sets the WWDG window value.
    133            * @param  WindowValue: specifies the window value to be compared to the downcounter.
    134            *   This parameter value must be lower than 0x80.
    135            * @retval None
    136            */

   \                                 In section .text, align 2, keep-with-next
    137          void WWDG_SetWindowValue(uint8_t WindowValue)
    138          {
   \                     WWDG_SetWindowValue: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
    139            __IO uint32_t tmpreg = 0;
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x9100             STR      R1,[SP, #+0]
    140          
    141            /* Check the parameters */
    142            assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
    143            /* Clear W[6:0] bits */
    144          
    145            tmpreg = WWDG->CFR & CFR_W_Mask;
    146          
    147            /* Set W[6:0] bits according to WindowValue value */
    148            tmpreg |= WindowValue & (uint32_t) BIT_Mask;
   \        0x6   0xF000 0x007F      AND      R0,R0,#0x7F
   \        0xA   0x....             LDR.N    R1,??DataTable7
   \        0xC   0x680A             LDR      R2,[R1, #+0]
   \        0xE   0x09D2             LSRS     R2,R2,#+7
   \       0x10   0x01D2             LSLS     R2,R2,#+7
   \       0x12   0x9200             STR      R2,[SP, #+0]
   \       0x14   0x9A00             LDR      R2,[SP, #+0]
   \       0x16   0x4310             ORRS     R0,R0,R2
   \       0x18   0x9000             STR      R0,[SP, #+0]
    149          
    150            /* Store the new value */
    151            WWDG->CFR = tmpreg;
   \       0x1A   0x9800             LDR      R0,[SP, #+0]
   \       0x1C   0x6008             STR      R0,[R1, #+0]
    152          }
   \       0x1E   0xB001             ADD      SP,SP,#+4
   \       0x20   0x4770             BX       LR
    153          
    154          /**
    155            * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
    156            * @param  None
    157            * @retval None
    158            */

   \                                 In section .text, align 2, keep-with-next
    159          void WWDG_EnableIT(void)
    160          {
    161            *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
   \                     WWDG_EnableIT: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable7_1
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x6008             STR      R0,[R1, #+0]
    162          }
   \        0x6   0x4770             BX       LR
    163          
    164          /**
    165            * @brief  Sets the WWDG counter value.
    166            * @param  Counter: specifies the watchdog counter value.
    167            *   This parameter must be a number between 0x40 and 0x7F.
    168            * @retval None
    169            */

   \                                 In section .text, align 2, keep-with-next
    170          void WWDG_SetCounter(uint8_t Counter)
    171          {
    172            /* Check the parameters */
    173            assert_param(IS_WWDG_COUNTER(Counter));
    174            /* Write to T[6:0] bits to configure the counter value, no need to do
    175               a read-modify-write; writing a 0 to WDGA bit does nothing */
    176            WWDG->CR = Counter & BIT_Mask;
   \                     WWDG_SetCounter: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable7_2
   \        0x2   0xF000 0x007F      AND      R0,R0,#0x7F
   \        0x6   0x6008             STR      R0,[R1, #+0]
    177          }
   \        0x8   0x4770             BX       LR
    178          
    179          /**
    180            * @brief  Enables WWDG and load the counter value.                  
    181            * @param  Counter: specifies the watchdog counter value.
    182            *   This parameter must be a number between 0x40 and 0x7F.
    183            * @retval None
    184            */

   \                                 In section .text, align 2, keep-with-next
    185          void WWDG_Enable(uint8_t Counter)
    186          {
    187            /* Check the parameters */
    188            assert_param(IS_WWDG_COUNTER(Counter));
    189            WWDG->CR = CR_WDGA_Set | Counter;
   \                     WWDG_Enable: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable7_2
   \        0x2   0xF040 0x0080      ORR      R0,R0,#0x80
   \        0x6   0x6008             STR      R0,[R1, #+0]
    190          }
   \        0x8   0x4770             BX       LR
    191          
    192          /**
    193            * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
    194            * @param  None
    195            * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
    196            */

   \                                 In section .text, align 2, keep-with-next
    197          FlagStatus WWDG_GetFlagStatus(void)
    198          {
    199            return (FlagStatus)(WWDG->SR);
   \                     WWDG_GetFlagStatus: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7_3
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xB2C0             UXTB     R0,R0
   \        0x6   0x4770             BX       LR
    200          }
    201          
    202          /**
    203            * @brief  Clears Early Wakeup interrupt flag.
    204            * @param  None
    205            * @retval None
    206            */

   \                                 In section .text, align 2, keep-with-next
    207          void WWDG_ClearFlag(void)
    208          {
    209            WWDG->SR = (uint32_t)RESET;
   \                     WWDG_ClearFlag: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable7_3
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x6008             STR      R0,[R1, #+0]
    210          }
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x4000'2C04        DC32     0x40002c04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x4205'80A4        DC32     0x420580a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x4000'2C00        DC32     0x40002c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x4000'2C08        DC32     0x40002c08
    211          
    212          /**
    213            * @}
    214            */
    215          
    216          /**
    217            * @}
    218            */
    219          
    220          /**
    221            * @}
    222            */
    223          
    224          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WWDG_ClearFlag
       8   WWDG_DeInit
         0   -> RCC_APB1PeriphResetCmd
         8   -> RCC_APB1PeriphResetCmd
       0   WWDG_Enable
       0   WWDG_EnableIT
       0   WWDG_GetFlagStatus
       0   WWDG_SetCounter
       0   WWDG_SetPrescaler
       4   WWDG_SetWindowValue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       8  WWDG_ClearFlag
      26  WWDG_DeInit
      10  WWDG_Enable
       8  WWDG_EnableIT
       8  WWDG_GetFlagStatus
      10  WWDG_SetCounter
      14  WWDG_SetPrescaler
      34  WWDG_SetWindowValue

 
 134 bytes in section .text
 
 134 bytes of CODE memory

Errors: none
Warnings: none
