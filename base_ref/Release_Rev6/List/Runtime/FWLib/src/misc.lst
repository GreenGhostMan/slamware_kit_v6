###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         28/Jul/2021  15:57:30
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\src\misc.c
#    Command line      =
#        -f
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\FWLib\src\misc.lst.rsp
#        (C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\src\misc.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_HD -D USART_ENABLE_USART3 -D
#        CONFIG_BREAKOUT_REV=6 -D USE_FRONT_IR_SENSORS -D FEATURE_SET_V -lCN
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\FWLib\src
#        --diag_suppress Pa050 -o
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\FWLib\src
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\..\common\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\CoreSupport\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\32f10x\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\FWLib\src\misc.o.d
#    Locale            =  C
#    List file         =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\FWLib\src\misc.lst
#    Object file       =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\FWLib\src\misc.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     20            ******************************************************************************
     21            */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "misc.h"
     25          
     26          /** @addtogroup STM32F10x_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup MISC 
     31            * @brief MISC driver modules
     32            * @{
     33            */
     34          
     35          /** @defgroup MISC_Private_TypesDefinitions
     36            * @{
     37            */
     38          
     39          /**
     40            * @}
     41            */ 
     42          
     43          /** @defgroup MISC_Private_Defines
     44            * @{
     45            */
     46          
     47          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     48          /**
     49            * @}
     50            */
     51          
     52          /** @defgroup MISC_Private_Macros
     53            * @{
     54            */
     55          
     56          /**
     57            * @}
     58            */
     59          
     60          /** @defgroup MISC_Private_Variables
     61            * @{
     62            */
     63          
     64          /**
     65            * @}
     66            */
     67          
     68          /** @defgroup MISC_Private_FunctionPrototypes
     69            * @{
     70            */
     71          
     72          /**
     73            * @}
     74            */
     75          
     76          /** @defgroup MISC_Private_Functions
     77            * @{
     78            */
     79          
     80          /**
     81            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
     82            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
     83            *   This parameter can be one of the following values:
     84            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
     85            *                                4 bits for subpriority
     86            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
     87            *                                3 bits for subpriority
     88            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
     89            *                                2 bits for subpriority
     90            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
     91            *                                1 bits for subpriority
     92            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
     93            *                                0 bits for subpriority
     94            * @retval None
     95            */

   \                                 In section .text, align 2, keep-with-next
     96          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
     97          {
     98            /* Check the parameters */
     99            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
    100            
    101            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    102            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
   \                     NVIC_PriorityGroupConfig: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable4
   \        0x2   0x....             LDR.N    R2,??DataTable4_1
   \        0x4   0x4308             ORRS     R0,R1,R0
   \        0x6   0x6010             STR      R0,[R2, #+0]
    103          }
   \        0x8   0x4770             BX       LR
    104          
    105          /**
    106            * @brief  Initializes the NVIC peripheral according to the specified
    107            *         parameters in the NVIC_InitStruct.
    108            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    109            *         the configuration information for the specified NVIC peripheral.
    110            * @retval None
    111            */

   \                                 In section .text, align 2, keep-with-next
    112          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    113          {
   \                     NVIC_Init: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
    114            uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    115            
    116            /* Check the parameters */
    117            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    118            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
    119            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    120              
    121            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
   \        0x2   0x7803             LDRB     R3,[R0, #+0]
   \        0x4   0x78C1             LDRB     R1,[R0, #+3]
   \        0x6   0x461C             MOV      R4,R3
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xB1D9             CBZ.N    R1,??NVIC_Init_0
    122            {
    123              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    124              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
   \        0xC   0x....             LDR.N    R1,??DataTable4_1
   \        0xE   0x680B             LDR      R3,[R1, #+0]
    125              tmppre = (0x4 - tmppriority);
    126              tmpsub = tmpsub >> tmppriority;
    127          
    128              tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    129              tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    130              tmppriority = tmppriority << 0x04;
    131                  
    132              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
   \       0x10   0x7845             LDRB     R5,[R0, #+1]
   \       0x12   0x7886             LDRB     R6,[R0, #+2]
   \       0x14   0xF403 0x63E0      AND      R3,R3,#0x700
   \       0x18   0xF5C3 0x63E0      RSB      R3,R3,#+1792
   \       0x1C   0x0A1B             LSRS     R3,R3,#+8
   \       0x1E   0x270F             MOVS     R7,#+15
   \       0x20   0xF1C3 0x0104      RSB      R1,R3,#+4
   \       0x24   0x40DF             LSRS     R7,R7,R3
   \       0x26   0x408D             LSLS     R5,R5,R1
   \       0x28   0x403E             ANDS     R6,R7,R6
   \       0x2A   0x4335             ORRS     R5,R6,R5
   \       0x2C   0x....             LDR.N    R1,??DataTable4_2
    133              
    134              /* Enable the Selected IRQ Channels --------------------------------------*/
    135              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    136                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \       0x2E   0x....             LDR.N    R3,??DataTable4_3
   \       0x30   0x012D             LSLS     R5,R5,#+4
   \       0x32   0x550D             STRB     R5,[R1, R4]
   \       0x34   0x7801             LDRB     R1,[R0, #+0]
   \       0x36   0xF001 0x001F      AND      R0,R1,#0x1F
   \       0x3A   0x4082             LSLS     R2,R2,R0
   \       0x3C   0x0949             LSRS     R1,R1,#+5
   \       0x3E   0xF843 0x2021      STR      R2,[R3, R1, LSL #+2]
   \       0x42   0xBDF0             POP      {R4-R7,PC}
    137            }
    138            else
    139            {
    140              /* Disable the Selected IRQ Channels -------------------------------------*/
    141              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    142                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \                     ??NVIC_Init_0: (+1)
   \       0x44   0xF003 0x031F      AND      R3,R3,#0x1F
   \       0x48   0x....             LDR.N    R0,??DataTable4_4
   \       0x4A   0xFA02 0xF303      LSL      R3,R2,R3
   \       0x4E   0x0964             LSRS     R4,R4,#+5
   \       0x50   0xF840 0x3024      STR      R3,[R0, R4, LSL #+2]
    143            }
    144          }
   \       0x54   0xBDF0             POP      {R4-R7,PC}
    145          
    146          /**
    147            * @brief  Sets the vector table location and Offset.
    148            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    149            *   This parameter can be one of the following values:
    150            *     @arg NVIC_VectTab_RAM
    151            *     @arg NVIC_VectTab_FLASH
    152            * @param  Offset: Vector Table base offset field. This value must be a multiple 
    153            *         of 0x200.
    154            * @retval None
    155            */

   \                                 In section .text, align 2, keep-with-next
    156          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    157          { 
    158            /* Check the parameters */
    159            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
    160            assert_param(IS_NVIC_OFFSET(Offset));  
    161             
    162            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
   \                     NVIC_SetVectorTable: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable4_5
   \        0x2   0x4011             ANDS     R1,R2,R1
   \        0x4   0x4308             ORRS     R0,R1,R0
   \        0x6   0x....             LDR.N    R1,??DataTable4_6
   \        0x8   0x6008             STR      R0,[R1, #+0]
    163          }
   \        0xA   0x4770             BX       LR
    164          
    165          /**
    166            * @brief  Selects the condition for the system to enter low power mode.
    167            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    168            *   This parameter can be one of the following values:
    169            *     @arg NVIC_LP_SEVONPEND
    170            *     @arg NVIC_LP_SLEEPDEEP
    171            *     @arg NVIC_LP_SLEEPONEXIT
    172            * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
    173            * @retval None
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    176          {
    177            /* Check the parameters */
    178            assert_param(IS_NVIC_LP(LowPowerMode));
    179            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    180            
    181            if (NewState != DISABLE)
   \                     NVIC_SystemLPConfig: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable4_7
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xBF19             ITTEE    NE
   \        0x6   0x6811             LDRNE    R1,[R2, #+0]
   \        0x8   0x4308             ORRNE    R0,R0,R1
   \        0xA   0x6813             LDREQ    R3,[R2, #+0]
   \        0xC   0xEA23 0x0000      BICEQ    R0,R3,R0
    182            {
    183              SCB->SCR |= LowPowerMode;
    184            }
    185            else
    186            {
    187              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
   \       0x10   0x6010             STR      R0,[R2, #+0]
    188            }
    189          }
   \       0x12   0x4770             BX       LR
    190          
    191          /**
    192            * @brief  Configures the SysTick clock source.
    193            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    194            *   This parameter can be one of the following values:
    195            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    196            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    197            * @retval None
    198            */

   \                                 In section .text, align 2, keep-with-next
    199          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    200          {
    201            /* Check the parameters */
    202            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    203            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
   \                     SysTick_CLKSourceConfig: (+1)
   \        0x0   0x2804             CMP      R0,#+4
   \        0x2   0x....             LDR.N    R1,??DataTable4_8
   \        0x4   0xD104             BNE.N    ??SysTick_CLKSourceConfig_0
    204            {
    205              SysTick->CTRL |= SysTick_CLKSource_HCLK;
   \        0x6   0x6808             LDR      R0,[R1, #+0]
   \        0x8   0xF040 0x0004      ORR      R0,R0,#0x4
   \        0xC   0x6008             STR      R0,[R1, #+0]
   \        0xE   0x4770             BX       LR
    206            }
    207            else
    208            {
    209              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
   \                     ??SysTick_CLKSourceConfig_0: (+1)
   \       0x10   0x680A             LDR      R2,[R1, #+0]
   \       0x12   0xF022 0x0204      BIC      R2,R2,#0x4
   \       0x16   0x600A             STR      R2,[R1, #+0]
    210            }
    211          }
   \       0x18   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x05FA'0000        DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0xE000'ED0C        DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x1FFF'FF80        DC32     0x1fffff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0xE000'ED08        DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0xE000'ED10        DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0xE000'E010        DC32     0xe000e010
    212          
    213          /**
    214            * @}
    215            */
    216          
    217          /**
    218            * @}
    219            */
    220          
    221          /**
    222            * @}
    223            */
    224          
    225          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   NVIC_Init
       0   NVIC_PriorityGroupConfig
       0   NVIC_SetVectorTable
       0   NVIC_SystemLPConfig
       0   SysTick_CLKSourceConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      86  NVIC_Init
      10  NVIC_PriorityGroupConfig
      12  NVIC_SetVectorTable
      20  NVIC_SystemLPConfig
      26  SysTick_CLKSourceConfig

 
 190 bytes in section .text
 
 190 bytes of CODE memory

Errors: none
Warnings: none
