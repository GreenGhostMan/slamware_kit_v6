###############################################################################
#
# IAR ANSI C/C++ Compiler V9.10.2.313/W64 for ARM         28/Jul/2021  15:57:37
# Copyright 1999-2021 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\infra_stm32\32f10x\boarddrv.c
#    Command line                 =
#        -f
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\RP-STM32\32f10x\boarddrv.lst.rsp
#        (C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\infra_stm32\32f10x\boarddrv.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_HD -D USART_ENABLE_USART3 -D
#        CONFIG_BREAKOUT_REV=6 -D USE_FRONT_IR_SENSORS -D FEATURE_SET_V -lCN
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\RP-STM32\32f10x
#        --diag_suppress Pa050 -o
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\RP-STM32\32f10x
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.0\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\src\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\..\common\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\CoreSupport\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\st_fwlib\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\
#        -I
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\..\infra_pub\arch\infra_stm32\32f10x\
#        -Ohz --use_c++_inline) --dependencies=n
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\RP-STM32\32f10x\boarddrv.o.d
#    Locale                       =  C
#    List file                    =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\List\Runtime\RP-STM32\32f10x\boarddrv.lst
#    Object file                  =
#        C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\base_ref\Release_Rev6\Obj\Runtime\RP-STM32\32f10x\boarddrv.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

C:\Users\linux\Desktop\SLAMWARE\breakoutBoardVersion6ReferenceCode\slamwarekit_reference_v6_code.20181120\slamwarekit_reference_v6_code.20181120\infra_pub\arch\infra_stm32\32f10x\boarddrv.c
      1          /*
      2           * SlamTec Infra Runtime Public
      3           * Copyright 2009 - 2017 RoboPeak
      4           * Copyright 2013 - 2017 Shanghai SlamTec Co., Ltd.
      5           * http://www.slamtec.com
      6           * All rights reserved.
      7           */
      8          /*
      9           * Redistribution and use in source and binary forms, with or without modification,
     10           * are permitted provided that the following conditions are met:
     11           *
     12           * 1. Redistributions of source code must retain the above copyright notice,
     13           *    this list of conditions and the following disclaimer.
     14           *
     15           * 2. Redistributions in binary form must reproduce the above copyright notice,
     16           *    this list of conditions and the following disclaimer in the documentation
     17           *    and/or other materials provided with the distribution.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
     20           * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     21           * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
     22           * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     23           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
     24           * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     25           * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
     26           * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     27           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     28           *
     29           */
     30          
     31          #include "common/common.h"
     32          
     33          static void _default_abort_proc();
     34          
     35          static volatile uint8_t alert_flg = 0;
     36          

   \                                 In section .data, align 4
     37          static abort_proc_t _abort_proc = _default_abort_proc;
   \                     _abort_proc:
   \        0x0   0x....'....        DC32 _default_abort_proc

   \                                 In section .bss, align 4
   \                     alert_flg:
   \        0x0                      DS8 1
   \        0x1                      DS8 3
   \        0x4                      DS8 4
     38          
     39          static volatile uint32_t _systick_val = 0;
     40          

   \                                 In section .text, align 2, keep-with-next
     41          static void _default_abort_proc()
     42          {
     43              while(1);
   \                     _default_abort_proc: (+1)
   \                     ??_default_abort_proc_0: (+1)
   \        0x0   0xE7FE             B.N      ??_default_abort_proc_0
     44          }
     45          
     46          /*
     47           * 系统定时器节拍中断
     48           * 节拍:1ms
     49           */

   \                                 In section .text, align 2, keep-with-next
     50          void SysTick_Handler(void)
     51          {
     52              _systick_val ++;
   \                     SysTick_Handler: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11
   \        0x2   0x6841             LDR      R1,[R0, #+4]
   \        0x4   0x1C49             ADDS     R1,R1,#+1
   \        0x6   0x6041             STR      R1,[R0, #+4]
     53          }
   \        0x8   0x4770             BX       LR
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void alert(void)
     56          {
     57              alert_flg = 1;
   \                     alert: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x7008             STRB     R0,[R1, #+0]
     58          }
   \        0x6   0x4770             BX       LR
     59          

   \                                 In section .text, align 2, keep-with-next
     60          int is_alert(void)
     61          {
     62              return alert_flg;
   \                     is_alert: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11
   \        0x2   0x7800             LDRB     R0,[R0, #+0]
   \        0x4   0x4770             BX       LR
     63          }
     64          
     65          

   \                                 In section .text, align 2, keep-with-next
     66          void clear_alert(void)
     67          {
     68              alert_flg = 0;
   \                     clear_alert: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x7008             STRB     R0,[R1, #+0]
     69          }
   \        0x6   0x4770             BX       LR
     70          

   \                                 In section .text, align 2, keep-with-next
     71          void board_set_abort_proc( abort_proc_t proc)
     72          {
     73              _abort_proc = proc;
   \                     board_set_abort_proc: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_1
   \        0x2   0x6008             STR      R0,[R1, #+0]
     74          }
   \        0x4   0x4770             BX       LR
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void board_abort_mode()
     77          {
     78              cli();
   \                     board_abort_mode: (+1)
   \        0x0   0xB672             CPSID    I
     79              _abort_proc();
   \        0x2   0x....             LDR.N    R0,??DataTable11_1
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0x4708             BX       R1
     80          }
     81          
     82          /*
     83           * 获取毫秒总累计数
     84           * 单位:ms
     85           */

   \                                 In section .text, align 2, keep-with-next
     86          uint32_t getms()
     87          {
     88              return _systick_val;
   \                     getms: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable11
   \        0x2   0x6840             LDR      R0,[R0, #+4]
   \        0x4   0x4770             BX       LR
     89          }
     90          
     91          
     92          #define SYSTICK_uS_PER_TICK      1000L/SYSTICK_1MS_TICKS
     93          /*
     94           * 获取微秒总累计数
     95           * 单位:us
     96           */

   \                                 In section .text, align 2, keep-with-next
     97          uint64_t getus()
     98          {
   \                     getus: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
     99              register _u32 cached_ms, cached_tick;
    100          
    101              _u32 context = enter_critical_section();
   \        0x2   0xF3EF 0x8010      MRS      R0,PRIMASK
   \        0x6   0xB672             CPSID    I
    102          
    103              cached_ms = _systick_val;
   \        0x8   0x....             LDR.N    R1,??DataTable11
    104              cached_tick = SysTick->VAL;
    105          
    106              if (SCB->ICSR & SCB_ICSR_PENDSTSET_Msk) {
   \        0xA   0x....             LDR.N    R4,??DataTable11_2
   \        0xC   0x684A             LDR      R2,[R1, #+4]
   \        0xE   0x....             LDR.N    R1,??DataTable11_3
   \       0x10   0x680B             LDR      R3,[R1, #+0]
   \       0x12   0x6825             LDR      R5,[R4, #+0]
   \       0x14   0x016E             LSLS     R6,R5,#+5
   \       0x16   0xBF44             ITT      MI
   \       0x18   0x1C52             ADDMI    R2,R2,#+1
   \       0x1A   0x680B             LDRMI    R3,[R1, #+0]
    107                  ++cached_ms;
    108                  cached_tick = SysTick->VAL;
    109              }
    110          
    111              leave_critical_section(context);
   \       0x1C   0xF380 0x8810      MSR      PRIMASK,R0
    112          
    113              return (_u64)cached_ms*1000 + ((SYSTICK_1MS_TICKS-1 - cached_tick)*SYSTICK_uS_PER_TICK);
   \       0x20   0x....             LDR.N    R5,??DataTable11_4
   \       0x22   0xF44F 0x747A      MOV      R4,#+1000
   \       0x26   0x1AEB             SUBS     R3,R5,R3
   \       0x28   0x4363             MULS     R3,R3,R4
   \       0x2A   0x....             LDR.N    R0,??DataTable11_5
   \       0x2C   0xFBB3 0xF0F0      UDIV     R0,R3,R0
   \       0x30   0x2100             MOVS     R1,#+0
   \       0x32   0xFBE4 0x0102      UMLAL    R0,R1,R4,R2
   \       0x36   0xBD70             POP      {R4-R6,PC}
    114          
    115          }
    116          
    117          /*
    118           * 不可打断的延时函数
    119           * 延时单位:ms
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          void delay(uint32_t ms)
    122          {
    123              uint32_t targettime = getms() + ms;
   \                     delay: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11
   \        0x2   0x684A             LDR      R2,[R1, #+4]
   \        0x4   0x1880             ADDS     R0,R0,R2
    124          
    125              while( getms() < targettime);
   \                     ??delay_0: (+1)
   \        0x6   0x684B             LDR      R3,[R1, #+4]
   \        0x8   0x4283             CMP      R3,R0
   \        0xA   0xD3FC             BCC.N    ??delay_0
    126          }
   \        0xC   0x4770             BX       LR
    127          /*
    128           * 可打断的延时函数
    129           * 延时单位:ms
    130           */

   \                                 In section .text, align 2, keep-with-next
    131          void delay_alert(uint32_t ms)
    132          {
    133              uint32_t targettime = getms() + ms;
   \                     delay_alert: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable11
   \        0x2   0x6851             LDR      R1,[R2, #+4]
   \        0x4   0x1840             ADDS     R0,R0,R1
    134              while( getms() < targettime && (!alert_flg));
   \                     ??delay_alert_0: (+1)
   \        0x6   0x6853             LDR      R3,[R2, #+4]
   \        0x8   0x4283             CMP      R3,R0
   \        0xA   0xD202             BCS.N    ??delay_alert_1
   \        0xC   0x7811             LDRB     R1,[R2, #+0]
   \        0xE   0x2900             CMP      R1,#+0
   \       0x10   0xD0F9             BEQ.N    ??delay_alert_0
    135              clear_alert();
   \                     ??delay_alert_1: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x7010             STRB     R0,[R2, #+0]
    136          }
   \       0x16   0x4770             BX       LR
    137          
    138          /*
    139           * ADC采样启动函数
    140           */

   \                                 In section .text, align 2, keep-with-next
    141          void adc_read_start(ADC_TypeDef * adc_dev, uint8_t ADC_Channel)
    142          {
   \                     adc_read_start: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    143          
    144              ADC_RegularChannelConfig(adc_dev, ADC_Channel, 1,
    145                                       ADC_Channel==ADC_INNER_TEMPER_CH? ADC_SampleTime_239Cycles5:
    146                                           ADC_SampleTime_55Cycles5);
   \        0x2   0x2910             CMP      R1,#+16
   \        0x4   0xBF0C             ITE      EQ
   \        0x6   0x2307             MOVEQ    R3,#+7
   \        0x8   0x2305             MOVNE    R3,#+5
   \        0xA   0x4604             MOV      R4,R0
   \        0xC   0x2201             MOVS     R2,#+1
   \        0xE   0x.... 0x....      BL       ADC_RegularChannelConfig
    147          
    148              ADC_Cmd(adc_dev, ENABLE);
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0xE8BD 0x4010      POP      {R4,LR}
   \       0x18   0x2101             MOVS     R1,#+1
   \       0x1A   0x.... 0x....      B.W      ADC_Cmd
    149          }
    150          
    151          
    152          /*
    153           * 读取ADC采样值函数
    154           */

   \                                 In section .text, align 2, keep-with-next
    155          uint16_t adc_read_final(ADC_TypeDef * adc_dev)
    156          {
    157              adc_dev->SR = ~(uint32_t)ADC_FLAG_EOC;
   \                     adc_read_final: (+1)
   \        0x0   0x....             B.N      ?Subroutine0
    158              return adc_dev->DR;
    159          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xF06F 0x0102      MVN      R1,#+2
   \        0x4   0x6001             STR      R1,[R0, #+0]
   \        0x6   0x6CC0             LDR      R0,[R0, #+76]
   \        0x8   0xB280             UXTH     R0,R0
   \        0xA   0x4770             BX       LR
    160          /*
    161           * 等待ADC采样完成函数
    162           */

   \                                 In section .text, align 2, keep-with-next
    163          uint16_t adc_read_wait(ADC_TypeDef * adc_dev)
    164          {
    165              while(!adc_read_is_ready(adc_dev));
   \                     adc_read_wait: (+1)
   \                     ??adc_read_wait_0: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0x078A             LSLS     R2,R1,#+30
   \        0x4   0xD5FC             BPL.N    ??adc_read_wait_0
    166              return adc_read_final(adc_dev);
   \        0x6                      REQUIRE ?Subroutine0
   \        0x6                      ;; // Fall through to label ?Subroutine0
    167          }
    168          
    169          /*
    170           * 获得芯片温度函数
    171           * 预留
    172           */

   \                                 In section .text, align 2, keep-with-next
    173          uint16_t board_get_temperature()
    174          {
   \                     board_get_temperature: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    175              uint16_t adc_raw;
    176              adc_read_start( GET_ADC(ADC_INNER_TEMPER_PORT),
    177                             GET_ADC_CHANNEL(ADC_INNER_TEMPER_CH));
   \        0x2   0x....             LDR.N    R4,??DataTable11_6
   \        0x4   0x2110             MOVS     R1,#+16
   \        0x6   0x4620             MOV      R0,R4
   \        0x8   0x.... 0x....      BL       adc_read_start
    178              adc_raw = adc_read_wait(GET_ADC(ADC_INNER_TEMPER_PORT));
    179              return ( (_s32)(ADC_INNER_TEMPER_2V5*10000)
    180                      -  (adc_raw*((_s32)(ADC_REF_VOLT*10000)))/ (0x1<<ADC_RES_BIT) )
    181                  / ((_s32)ADC_INNER_TEMPER_SLOPE) + 250;
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x.... 0x....      BL       adc_read_wait
   \       0x12   0x4601             MOV      R1,R0
   \       0x14   0xF246 0x1076      MOVW     R0,#+24950
   \       0x18   0x4341             MULS     R1,R0,R1
   \       0x1A   0x12CA             ASRS     R2,R1,#+11
   \       0x1C   0xF243 0x70DC      MOVW     R0,#+14300
   \       0x20   0xEB01 0x5112      ADD      R1,R1,R2, LSR #+20
   \       0x24   0xEBA0 0x3021      SUB      R0,R0,R1, ASR #+12
   \       0x28   0x1041             ASRS     R1,R0,#+1
   \       0x2A   0xEB00 0x7091      ADD      R0,R0,R1, LSR #+30
   \       0x2E   0x1080             ASRS     R0,R0,#+2
   \       0x30   0x30FA             ADDS     R0,R0,#+250
   \       0x32   0xB280             UXTH     R0,R0
   \       0x34   0xBD10             POP      {R4,PC}
    182          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x....'....        DC32     alert_flg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x....'....        DC32     _abort_proc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0xE000'ED04        DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0xE000'E018        DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0x0001'193F        DC32     0x1193f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \        0x0   0x0001'1940        DC32     0x11940

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \        0x0   0x4001'2400        DC32     0x40012400

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SysTick_Handler
       0   _default_abort_proc
       0   adc_read_final
       8   adc_read_start
         0   -> ADC_Cmd
         8   -> ADC_RegularChannelConfig
       0   adc_read_wait
       0   alert
       0   board_abort_mode
         0   -- Indirect call
       8   board_get_temperature
         8   -> adc_read_start
         8   -> adc_read_wait
       0   board_set_abort_proc
       0   clear_alert
       0   delay
       0   delay_alert
       0   getms
      16   getus
       0   is_alert


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
      12  ?Subroutine0
      10  SysTick_Handler
       4  _abort_proc
       2  _default_abort_proc
       2  adc_read_final
      30  adc_read_start
       6  adc_read_wait
       8  alert
       8  alert_flg
          _systick_val
       8  board_abort_mode
      54  board_get_temperature
       6  board_set_abort_proc
       8  clear_alert
      14  delay
      24  delay_alert
       6  getms
      56  getus
       6  is_alert

 
   8 bytes in section .bss
   4 bytes in section .data
 280 bytes in section .text
 
 280 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
